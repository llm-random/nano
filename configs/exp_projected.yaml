# _run_: true

common:
  _target_: src.definitions.Common
  dff: 256
  dmodel: 64
  head_norm: true
  init_scale: 0.1
  init_type: truncated_normal_fixed
  model_type: gpt
  sequence_length: 32
  vocab_size: 50257
  
model:
  _target_: src.projected_compression.model.LLM

  embedding:
    _target_: src.projected_compression.model.TransformerEmbedding
    vocab_size: ${common.vocab_size}
    dmodel: ${common.dmodel}
    init_fn:
      _target_: src.projected_compression.model.trunc_normal_
      _partial_: true

  encoder:
    _target_: src.projected_compression.model.TransformerEncoder
    n_blocks: 2
    block_fn:
      _target_: src.projected_compression.model.TransformerBlock
      _partial_: true
      norm_fn: 
        _target_: src.core.model.RMSNorm
        _partial_: true
        eps: 1e-5
        normalized_shape: ${common.dmodel}
      
      attention_fn:
        _target_: src.projected_compression.model.LlamaAttention
        _partial_: true
        dmodel: ${common.dmodel}
        q_heads: 4
        kv_heads: 2
        seq_len: ${common.sequence_length}
        linear_fn:
          _target_: src.projected_compression.model.Linear
          _partial_: true
          partial_init_fn:
            _target_: src.projected_compression.model.llm_random_weight_init
            _partial_: true
            scale: 1

      ff_layer_fn:
        _target_: src.projected_compression.model.LlamaFeedForward
        _partial_: true
        dmodel: ${common.dmodel}
        dff: ${common.dff}
        linear_fn:
          _target_: src.projected_compression.model.Linear
          _partial_: true
          partial_init_fn:
            _target_: src.projected_compression.model.llm_random_weight_init
            _partial_: true
            scale: 1

  head:
    _target_: src.projected_compression.model.TransformerHead
    dmodel: ${common.dmodel}
    vocab_size: ${common.vocab_size}
    linear_fn:
      _target_: src.projected_compression.model.Linear
      _partial_: true
      partial_init_fn:
        _target_: src.projected_compression.model.dummy_weight_init
        _partial_: true
    norm_fn: 
      _target_: src.core.model.RMSNorm
      _partial_: true
      eps: 1e-5
      normalized_shape: ${common.dmodel}
    

trainer:
  _partial_: true
  _target_: src.core.trainer.Trainer

  checkpoint:
    save:
      interval: 12500
      model_checkpoint_filename: __model_optim_scheduler__.pt
      training_state_filename: __training_state__.pt
      path: checkpoints # Change me!

  #  load:
    # type: "normal"
    # path:  ${trainer.checkpoint.save.path}
    # model_checkpoint_filename: ${trainer.checkpoint.save.model_checkpoint_filename}
    # training_state_filename: ${trainer.checkpoint.save.training_state_filename}

    load:
      type: huggingface
      path: "meta-llama/Llama-3.2-3B"


  eval_interval: 100
  n_eval_steps: 5

  gradient_accumulation_steps: 1
  gradient_clipping: 1.0
  n_steps: 100

  learning_rate: 0.001
  scheduler:
    _partial_: true
    _target_: src.core.schedulers.get_cosine_scheduler_with_warmup
    final_lr_fraction: 0.1
    warmup_steps: 500

  weight_decay: 0.1

  train_dataloader:
    _target_: src.core.datasets.get_dataloader
    dataset_path: data
    dataset_split: train
    dataset_type: c4
    num_workers: 0 # Change me!
    seed: 20001
    sequence_length: 32
    shuffle: true
    total_batch_size: 32
    use_new_sampling_method: true
    world_size_independent: false

  eval_dataloader:
    _target_: src.core.datasets.get_dataloader
    dataset_path: data_eval
    dataset_split: validation
    dataset_type: c4
    num_workers: 0 # Change me!
    seed: 123
    sequence_length: 32
    shuffle: true
    total_batch_size: 32
    use_new_sampling_method: true
    world_size_independent: false

  distributed: null
    # fsdp:
    #   mixed_precision:
    #     dtype: bfloat16
    #     ignored_classes:
    #       - LayerNorm
    #       - AttentionMechanism
    #   modules_to_wrap:
    #     - TransformerBlock
    #     - EmbeddingLayer
    #     - PredictionHead

infrastructure:
  slurm:
    cpus-per-task: 32
    gres: gpu:2
    job-name: test
    mem_per_gpu: 125G
    nodes: 1
    partition: h100
    time: "0-1:00:00"
    ntasks-per-node: 2

  venv_path: $HOME/nano/.venv/bin/activate # Change me!
  experiment_prepare_venv_path: ${infrastructure.venv_path}

  cemetery_experiments_dir: ~/llmrandom_cemetery

  metric_logger:
    _target_: src.definitions.MetricLoggerConfig
    heavy_metrics_calculation_interval: 100
    name: test
    new_neptune_job: false
    # project_name: pmtest/llm-random
    project_name: crewtool/mojtestproject
    tags:
      - test
    type: neptune

  git:
    remote_name: cemetery
    remote_url: git@github.com:llm-random/llm-random-cemetery.git

  server: entropia

  generated_configs_path: generated_configs
