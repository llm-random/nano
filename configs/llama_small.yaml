# _run_: true

common:
  _target_: src.definitions.Common
  dff: 512
  dmodel: 128
  model_type: gpt
  sequence_length: 32
  vocab_size: 128256
  
model:
  _target_: src.projected_compression.model.LLM

  embedding:
    _target_: src.projected_compression.model.TransformerEmbedding
    vocab_size: ${common.vocab_size}
    dmodel: ${common.dmodel}
    init_fn:
      _target_: src.projected_compression.model.trunc_normal_
      _partial_: true

  encoder:
    _target_: src.projected_compression.model.TransformerEncoder
    n_blocks: 2
    block_fn:
      _target_: src.projected_compression.model.TransformerBlock
      _partial_: true
      norm_fn: 
        _target_: src.core.model.RMSNorm
        _partial_: true
        eps: 1e-5
        normalized_shape: ${common.dmodel}
      
      attention_fn:
        _target_: src.projected_compression.model.RoPEAttention
        _partial_: true
        dmodel: ${common.dmodel}
        q_heads: 4
        kv_heads: 2
        seq_len: ${common.sequence_length}
        q_proj_fn:
          _target_: src.projected_compression.model.Linear
          _partial_: true
          in_features: ${common.dmodel}
          out_features: ${common.dmodel}
          partial_init_fn:
            _target_: src.projected_compression.model.llm_random_weight_init
            _partial_: true
            scale: 1


        k_proj_fn:
          _target_: src.projected_compression.model.Linear
          _partial_: true
          in_features: ${common.dmodel}
          out_features: ${eval:'(${common.dmodel} // ${model.encoder.block_fn.attention_fn.q_heads}) * ${model.encoder.block_fn.attention_fn.kv_heads}'}
          partial_init_fn:
            _target_: src.projected_compression.model.llm_random_weight_init
            _partial_: true
            scale: 1

        v_proj_fn: ${model.encoder.block_fn.attention_fn.k_proj_fn}

        o_proj_fn: ${model.encoder.block_fn.attention_fn.q_proj_fn}
        
        rope_base: 500000
        rope_scale_freqs: true


      ff_layer_fn:
        _target_: src.projected_compression.model.ProjectedLlamaFeedForward
        _partial_: true 
        ff_pre_act_fn:
          _target_: src.projected_compression.model.Linear
          _partial_: true
          in_features: ${common.dmodel}
          out_features: ${common.dff}
          partial_init_fn:
            _target_: src.projected_compression.model.llm_random_weight_init
            _partial_: true
            scale: 1
        ff_post_act_fn: 
          _target_: src.projected_compression.model.Linear
          _partial_: true
          in_features: ${common.dff}
          out_features: ${common.dmodel}
          partial_init_fn:
            _target_: src.projected_compression.model.llm_random_weight_init
            _partial_: true
            scale: 1
        gate_fn: ${model.encoder.block_fn.ff_layer_fn.ff_pre_act_fn}

  head:
    _target_: src.projected_compression.model.TransformerHead
    linear_fn:
      _target_: src.projected_compression.model.Linear
      _partial_: true
      in_features: ${common.dmodel}
      out_features: ${common.vocab_size}
      partial_init_fn:
        _target_: src.projected_compression.model.llm_random_weight_init
        _partial_: true
        scale: 1
    norm_fn: 
        _target_: src.core.model.RMSNorm
        _partial_: true
        eps: 1e-5
        normalized_shape: ${common.dmodel}

trainer:
  _partial_: true
  _target_: src.core.trainer.Trainer

  checkpoint:
    save:
      interval: -1
      model_checkpoint_filename: __model_optim_scheduler__.pt
      training_state_filename: __training_state__.pt
      path: checkpoints # Change me!

    load:
      type: huggingface
      path: "src/core/crewtool_small"

  eval_interval: 100
  n_eval_steps: 5

  gradient_accumulation_steps: 1
  gradient_clipping: 1.0
  n_steps: 2001

  learning_rate: 0.001
  scheduler:
    _partial_: true
    _target_: src.core.schedulers.get_cosine_scheduler_with_warmup
    final_lr_fraction: 0.1
    warmup_steps: 500

  weight_decay: 0.1

  train_dataloader:
    _target_: src.core.datasets.get_dataloader
    dataset_path: "/storage_nvme_1/llm-random/datasets/c4/train"
    dataset_split: train
    dataset_type: c4
    tokenize_fn: 
      _target_: src.core.datasets.llama_tokenize_fn
    num_workers: 12 # Change me!
    seed: 20001
    sequence_length: 32
    shuffle: true
    total_batch_size: 32
    use_new_sampling_method: true
    world_size_independent: false

  eval_dataloader:
    _target_: src.core.datasets.get_dataloader
    dataset_path: "/storage_nvme_1/llm-random/datasets/c4/validation"
    dataset_split: validation
    dataset_type: c4
    tokenize_fn: 
      _target_: src.core.datasets.llama_tokenize_fn
    num_workers: 12 # Change me!
    seed: 123
    sequence_length: 32
    shuffle: true
    total_batch_size: 32
    use_new_sampling_method: true
    world_size_independent: false

  distributed:
    fsdp:
      mixed_precision:
        dtype: bfloat16
        ignored_classes:
          - RMSNorm
          - AttentionMechanism
      modules_to_wrap:
        - TransformerBlock
        - EmbeddingLayer
        - TransformerHead

infrastructure:
  slurm:
    cpus-per-task: 32
    gres: gpu:2
    job-name: test
    mem_per_gpu: 125G
    nodes: 1
    partition: h100
    time: "0-1:00:00"
    ntasks-per-node: 2
    export: "ALL,HF_HUB_CACHE=/storage_nvme_3/crewtool/huggingface/hub"

  venv_path: $HOME/nano/.venv/bin/activate # Change me!
  experiment_prepare_venv_path: ${infrastructure.venv_path}

  cemetery_experiments_dir: ~/llmrandom_cemetery

  metric_logger:
    _target_: src.definitions.MetricLoggerConfig
    heavy_metrics_calculation_interval: 100
    name: test
    new_neptune_job: false
    project_name: pmtest/llm-random
    tags:
      - test
    type: neptune

  git:
    remote_name: cemetery
    remote_url: git@github.com:llm-random/llm-random-cemetery.git

  server: entropia

  generated_configs_path: generated_configs
